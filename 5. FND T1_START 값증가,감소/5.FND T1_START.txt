//이 코드를 활용해서 FND 카운트를 만들고 싶었으나 실패했음. 아래 코드는 29 -> 0을 만들고 다시 29로 돌아가 0으로 감소하는 코드를 만들고 싶었으나 실패했습니다.

#include <avr/io.h>
#include <avr/interrupt.h>

#define DIG1	0
#define DIG2	1
#define DIG3	2
#define DIG4	3

#define T1_START	7936
int count;
int sec, min , hour;

char dig_table[4] = {0x10, 0x20, 0x40, 0x80};
				   //DIG1  DIG2  DIG3  DIG4
//char fnd_table[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
//char fnd_table1[1] = {0x3F};  //천
//char fnd_table2[1] = {0x3F}; //백
char fnd_table3[3] =  {0x5B, 0x06, 0x3F};  //십
char fnd_table4[10] = {0x6F, 0x7F, 0x07, 0x7D, 0x6D, 0x66, 0x4F, 0x5B, 0x06, 0x3F};  //일
	
	
ISR(TIMER1_OVF_vect){
	TCNT1 = T1_START;

	
	if(++sec >=60) {
	sec = 0;
	if(++min >= 60){
	min=0;
	if(++hour >=24){
	hour=0;
	}
	}
	
	}
}


void Delay(int idata)
{
	int i,j;
	
	for(i=0; i<idata; i++){
		for(j=0; j<5000; j++);
		}
}

void Init_IOport(void)
{
	DDRC=0xFF;
	PORTC = 0xFF;

	DDRD = 0xFF;
	PORTD = 0x0F;
}

void Init_Interrupt(void)
{
	TCCR1A = 0x00;
	TCCR1B = 0x04; // Normal timer , clk/256 분주비 설정
	TIMSK =  0x04;  // Timer0 Overflow Interrupt 설정
	TCNT1 = T1_START;  // Timer0 초기값 설정

	SREG = 0x80;
}

void Init_Variable(void)
{
	
	sec = 0;
}


int main(void)
{
	Init_IOport();

	Init_Interrupt();

	Init_Variable();

    /* Replace with your application code */
    while (1) 
    {
		/*PORTD = dig_table[DIG1];
		PORTC = ~fnd_table1[min/10];
		Delay(1);

		PORTD = dig_table[DIG2];
		PORTC = ~(fnd_table2[min%10] | 0x80);
		Delay(1);*/
		
		PORTD = dig_table[DIG3];
		PORTC = ~fnd_table3[sec/10];
		Delay(1);

		
		PORTD = dig_table[DIG4];
		PORTC = ~fnd_table4[sec % 10];
		Delay(1);
		
		
		
    }
}